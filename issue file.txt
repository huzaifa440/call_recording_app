Here is the code for main.dart file

// lib/main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'services/permission_service.dart';
import 'services/recording_service.dart';
import 'services/settings_service.dart';
import 'services/call_log_service.dart';
import 'screens/home_screen.dart';
import 'screens/settings_screen.dart';
import 'screens/call_log_screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => RecordingService()),
        ChangeNotifierProvider(create: (_) => SettingsService()),
        ChangeNotifierProvider(create: (_) => CallLogService()),
        Provider(create: (_) => PermissionService()),
      ],
      child: MaterialApp(
        title: 'Call Recording App',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        initialRoute: '/',
        routes: {
          '/': (context) => const HomeScreen(),
          '/settings': (context) => const SettingsScreen(),
          '/call-log': (context) => CallLogScreen(),
        },
      ),
    );
  }
}


Here is the code for settings_service.dart

// lib/services/settings_service.dart
import 'package:flutter/material.dart';

class SettingsService extends ChangeNotifier {
  String _storageLocation = '/storage/emulated/0/CallRecordings';
  bool _isRecordingEnabled = true;

  String get storageLocation => _storageLocation;

  bool get isRecordingEnabled => _isRecordingEnabled;

  void setStorageLocation(String location) {
    _storageLocation = location;
    notifyListeners();
  }

  void setRecordingEnabled(bool enabled) {
    _isRecordingEnabled = enabled;
    notifyListeners();
  }
}



Here is the code for recording_service.dart

// lib/services/recording_service.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class RecordingService extends ChangeNotifier {
  static const platform =
      MethodChannel('com.example.call_recording_app/recording');

  List<Recording> _recordings = [];

  List<Recording> get recordings => _recordings;

  Future<void> startRecording(String fileName) async {
    try {
      await platform.invokeMethod('startRecording', {'fileName': fileName});
    } on PlatformException catch (e) {
      print("Failed to start recording: '${e.message}'.");
    }
  }

  Future<void> stopRecording() async {
    try {
      await platform.invokeMethod('stopRecording');
    } on PlatformException catch (e) {
      print("Failed to stop recording: '${e.message}'.");
    }
  }

  void addRecording(Recording recording) {
    _recordings.add(recording);
    notifyListeners();
  }

  void deleteRecording(Recording recording) {
    _recordings.remove(recording);
    notifyListeners();
  }
}

class Recording {
  final String name;
  final String date;

  Recording(this.name, this.date);
}


Here is the code for permission_service.dart

// lib/services/permission_service.dart
import 'package:permission_handler/permission_handler.dart';

class PermissionService {
  Future<bool> requestPermissions() async {
    final phonePermission = await Permission.phone.request();
    final storagePermission = await Permission.storage.request();

    return phonePermission.isGranted && storagePermission.isGranted;
  }
}


Here is the code for call_log_service.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
// import 'package:call_log/call_log.dart';

class CallLogService extends ChangeNotifier {
  static const platform =
      MethodChannel('com.example.call_recording_app/call_logs');

  final List<CallLog> _callLogs = [];

  List<CallLog> get callLogs => _callLogs;

  Future<void> fetchCallLogs() async {
    try {
      final List<dynamic> logs = await platform.invokeMethod('getCallLogs');
      _callLogs.clear();
      for (var log in logs) {
        _callLogs.add(CallLog(
          phoneNumber: log['phoneNumber'],
          contactName: log['contactName'],
          date: log['date'],
          type: log['type'],
        ));
      }
      notifyListeners();
    } on PlatformException catch (e) {
      print("Failed to get call logs: '${e.message}'.");
    }
  }

  void addCallLog(CallLog callLog) {
    _callLogs.add(callLog);
    notifyListeners();
  }

  void deleteCallLog(CallLog callLog) {
    _callLogs.remove(callLog);
    notifyListeners();
  }
}

class CallLog {
  final String phoneNumber;
  final String contactName;
  final String date;
  final String type; // incoming or outgoing

  CallLog({
    required this.phoneNumber,
    required this.contactName,
    required this.date,
    required this.type,
  });
}


Here is the code for settings_screen.dart

// lib/screens/settings_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:call_recording_app/services/settings_service.dart';

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final settingsService = Provider.of<SettingsService>(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Settings'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            ListTile(
              title: const Text('Storage Location'),
              subtitle: Text(settingsService.storageLocation),
              onTap: () {
                // Implement storage location picker
              },
            ),
            SwitchListTile(
              title: const Text('Enable Call Recording'),
              value: settingsService.isRecordingEnabled,
              onChanged: (value) {
                settingsService.setRecordingEnabled(value);
              },
            ),
          ],
        ),
      ),
    );
  }
}



here is the code for home_screen.dart



// lib/screens/home_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:call_recording_app/services/recording_service.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final recordings = Provider.of<RecordingService>(context).recordings;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Recorded Calls'),
        actions: [
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () {
              Navigator.pushNamed(context, '/settings');
            },
          ),
          IconButton(
            icon: const Icon(Icons.list),
            onPressed: () {
              Navigator.pushNamed(context, '/call-log');
            },
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: recordings.length,
        itemBuilder: (context, index) {
          final recording = recordings[index];
          return ListTile(
            title: Text(recording.name),
            subtitle: Text(recording.date),
            onTap: () {
              // Play the recording
            },
            trailing: IconButton(
              icon: const Icon(Icons.delete),
              onPressed: () {
                Provider.of<RecordingService>(context, listen: false)
                    .deleteRecording(recording);
              },
            ),
          );
        },
      ),
    );
  }
}




here is the code for call_log_screen.dart


// lib/screens/call_log_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:call_recording_app/services/call_log_service.dart';
// import 'package:call_log/call_log.dart';

class CallLogScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final callLogs = Provider.of<CallLogService>(context).callLogs;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Call Log'),
      ),
      body: ListView.builder(
        itemCount: callLogs.length,
        itemBuilder: (context, index) {
          final callLog = callLogs[index];
          return ListTile(
            title: Text(callLog.contactName.isNotEmpty
                ? callLog.contactName
                : callLog.phoneNumber),
            subtitle: Text('${callLog.date} (${callLog.type})'),
            onTap: () {
              // Show call details or recording if available
            },
          );
        },
      ),
    );
  }
}



here is the code for project level build.gradle 


buildscript {
    ext{
        kotlin_version = '1.7.20'
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.15'
    }
}
rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
    project.evaluationDependsOn(':app')
}



here is the code for app level build.gradle

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.call_recording_app"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.call_recording_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion '24'
        targetSdkVersion '32'
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {}

here is the code for AndroidManifest.xml file

<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.call_recording_app">

<uses-permission android:name="android.permission.READ_PHONE_STATE"/>
<uses-permission android:name="android.permission.PROCESS_OUTGOING_CALLS"/>
<uses-permission android:name="android.permission.RECORD_AUDIO"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_CALL_LOG" />
<uses-permission android:name="android.permission.WRITE_CALL_LOG" />

    <application
        android:label="call_recording_app"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility?hl=en and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>


here is the code for MainActivity.kt file








package com.example.call_recording_app

import android.Manifest
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.media.MediaRecorder
import android.os.Bundle
import android.telephony.TelephonyManager
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel
import java.io.File
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class MainActivity : FlutterActivity() {

    private val CHANNEL = "com.example.call_recording_app/recording"
    private var recorder: MediaRecorder? = null
    private var recordingFile: File? = null

    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)

        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "startRecording" -> {
                    val fileName = call.argument<String>("fileName")
                    if (fileName != null) {
                        startRecording(fileName)
                        result.success(null)
                    } else {
                        result.error("INVALID_ARGUMENT", "File name is null", null)
                    }
                }
                "stopRecording" -> {
                    stopRecording()
                    result.success(null)
                }
                else -> {
                    result.notImplemented()
                }
            }
        }

        requestPermissions()
        registerCallReceiver()
    }

    private fun startRecording(fileName: String) {
        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.RECORD_AUDIO
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.RECORD_AUDIO),
                RECORD_AUDIO_REQUEST_CODE
            )
            return
        }

        recordingFile = File(getExternalFilesDir(null), fileName)
        recorder = MediaRecorder().apply {
            setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION)
            setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP)
            setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)
            setOutputFile(recordingFile?.absolutePath)
            try {
                prepare()
                start()
            } catch (e: Exception) {
                // Handle recording start error
                e.printStackTrace()
            }
        }
    }

    private fun stopRecording() {
        recorder?.apply {
            try {
                stop()
                release()
            } catch (e: Exception) {
                // Handle recording stop error
                e.printStackTrace()
            }
        }
        recorder = null
    }

    private val callReceiver: BroadcastReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            val state = intent.getStringExtra(TelephonyManager.EXTRA_STATE)
            val binaryMessenger = flutterEngine?.dartExecutor?.binaryMessenger
            if (binaryMessenger != null) {
                when (state) {
                    TelephonyManager.EXTRA_STATE_RINGING -> {
                        val incomingNumber = intent.getStringExtra(TelephonyManager.EXTRA_INCOMING_NUMBER)
                        val fileName = "IN_${incomingNumber}_${getCurrentDate()}.3gp"
                        MethodChannel(binaryMessenger, CHANNEL)
                            .invokeMethod("startRecording", mapOf("fileName" to fileName))
                    }
                    TelephonyManager.EXTRA_STATE_OFFHOOK -> {
                        val outgoingNumber = intent.getStringExtra(Intent.EXTRA_PHONE_NUMBER)
                        val fileName = "OUT_${outgoingNumber}_${getCurrentDate()}.3gp"
                        MethodChannel(binaryMessenger, CHANNEL)
                            .invokeMethod("startRecording", mapOf("fileName" to fileName))
                    }
                    TelephonyManager.EXTRA_STATE_IDLE -> {
                        MethodChannel(binaryMessenger, CHANNEL)
                            .invokeMethod("stopRecording", null)
                    }
                }
            }
        }
    }

    private fun registerCallReceiver() {
        val filter = IntentFilter()
        filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED)
        filter.addAction(Intent.ACTION_NEW_OUTGOING_CALL)
        registerReceiver(callReceiver, filter)
    }

    private fun getCurrentDate(): String {
        val sdf = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault())
        return sdf.format(Date())
    }

    private fun requestPermissions() {
        val permissions = arrayOf(
            Manifest.permission.RECORD_AUDIO,
            Manifest.permission.READ_PHONE_STATE,
            Manifest.permission.PROCESS_OUTGOING_CALLS,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.READ_CALL_LOG,
            Manifest.permission.WRITE_CALL_LOG
        )
        val allPermissionsGranted = permissions.all {
            ContextCompat.checkSelfPermission(this, it) == PackageManager.PERMISSION_GRANTED
        }

        if (!allPermissionsGranted) {
            ActivityCompat.requestPermissions(this, permissions, PERMISSION_REQUEST_CODE)
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, 
        permissions: Array<out String>, 
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                // All permissions are granted
            } else {
                // Handle the case where permissions are not granted
            }
        }
    }

    companion object {
        private const val RECORD_AUDIO_REQUEST_CODE = 123
        private const val PERMISSION_REQUEST_CODE = 456
    }
}



here is the code for pubspec.yaml file

name: call_recording_app
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=3.3.3 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.6
  call_log: ^4.0.0
  flutter_local_notifications: ^17.1.2
  permission_handler: ^11.3.1
  path_provider: ^2.1.3
  flutter_sound: ^9.4.11
  telephony: ^0.2.0
  audioplayers: ^6.0.0
  provider: ^6.1.2
  path: ^1.9.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^3.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages





now please help me to sort out my problem that why my recordings are not being saved in the app and in the mobile while I have given all the required permissions to my application.

